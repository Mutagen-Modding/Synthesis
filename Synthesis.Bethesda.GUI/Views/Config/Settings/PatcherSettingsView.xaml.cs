using Noggog.WPF;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Windows;

namespace Synthesis.Bethesda.GUI.Views;

/// <summary>
/// Interaction logic for PatcherSettingsView.xaml
/// </summary>
public partial class PatcherSettingsView
{
    public PatcherSettingsView()
    {
        InitializeComponent();
        this.WhenActivated((disposable) =>
        {
            this.WhenAnyValue(x => x.ViewModel!.SettingsConfiguration)
                .Select(x => x.Style == SettingsStyle.Open || x.Style == SettingsStyle.Host ? Visibility.Visible : Visibility.Collapsed)
                .BindTo(this, x => x.OpenSettingsButton.Visibility)
                .DisposeWith(disposable);
            Observable.CombineLatest(
                    this.WhenAnyValue(x => x.ViewModel!.SettingsConfiguration),
                    this.WhenAnyValue(x => x.ViewModel!.ReflectionSettings!.SettingsLoading),
                    (target, loading) => target.Style == SettingsStyle.None && !loading ? Visibility.Visible : Visibility.Collapsed)
                .BindTo(this, x => x.NoSettingsText.Visibility)
                .DisposeWith(disposable);
            this.WhenAnyValue(x => x.ViewModel!.OpenSettingsCommand)
                .BindTo(this, x => x.OpenSettingsButton.Command)
                .DisposeWith(disposable);
            this.WhenAnyFallback(x => x.ViewModel!.ReflectionSettings)
                .BindTo(this, x => x.AutogeneratedSettingsView.DataContext)
                .DisposeWith(disposable);
        });
    }
}