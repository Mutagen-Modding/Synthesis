using DynamicData;
using Noggog;
using Noggog.WPF;
using ReactiveUI;
using Synthesis.Bethesda;
using System.Reactive;
using System.Reactive.Linq;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Order;
using Synthesis.Bethesda.Execution.Patchers.Git;

namespace Mutagen.Bethesda.Synthesis.WPF;

public class AutogeneratedSettingsVm : ViewModel
{
    private readonly ObservableAsPropertyHelper<bool> _settingsLoading;
    public bool SettingsLoading => _settingsLoading.Value;

    private readonly ObservableAsPropertyHelper<ErrorResponse> _status;
    public ErrorResponse Error => _status.Value;

    private ReflectionSettingsVM? _selectedSettings;
    public ReflectionSettingsVM? SelectedSettings
    {
        get => _selectedSettings;
        set
        {
            if (value == null) return;
            RaiseAndSetIfChanged(ref _selectedSettings, value);
        }
    }

    private readonly ObservableAsPropertyHelper<ReflectionSettingsBundleVm?> _bundle;
    public ReflectionSettingsBundleVm? Bundle => _bundle.Value;

    public AutogeneratedSettingsVm(
        SettingsConfiguration config,
        TargetProject targetProject,
        IObservable<IChangeSet<IModListingGetter>> loadOrder,
        IObservable<ILinkCache?> linkCache,
        IProvideReflectionSettingsBundle provideBundle)
    {
        var targetSettingsVm = Observable.Return(Unit.Default)
            .ObserveOn(RxApp.TaskpoolScheduler)
            .Select(_ =>
            {
                return Observable.Create<(bool Processing, GetResponse<ReflectionSettingsBundleVm> SettingsVM)>(async (observer, cancel) =>
                {
                    try
                    {
                        observer.OnNext((true, GetResponse<ReflectionSettingsBundleVm>.Fail("Loading")));
                        var reflectionBundle = await provideBundle.ExtractBundle(
                            targetProject,
                            targets: config.Targets,
                            detectedLoadOrder: loadOrder.ObserveOn(RxApp.MainThreadScheduler),
                            linkCache: linkCache,
                            cancel: cancel).ConfigureAwait(false);
                        if (reflectionBundle.Failed)
                        {
                            observer.OnNext((false, reflectionBundle));
                            return;
                        }
                        observer.OnNext((false, reflectionBundle.Value));
                    }
                    catch (Exception ex)
                    {
                        observer.OnNext((false, GetResponse<ReflectionSettingsBundleVm>.Fail(ex)));
                    }
                    observer.OnCompleted();
                });
            })
            .Switch()
            .DisposePrevious(x => x.SettingsVM.Value)
            .Replay(1)
            .RefCount();

        _settingsLoading = targetSettingsVm
            .Select(t => t.Processing)
            .ToGuiProperty(this, nameof(SettingsLoading), deferSubscription: true);

        _bundle = targetSettingsVm
            .Select(x =>
            {
                if (x.Processing || x.SettingsVM.Failed)
                {
                    return new ReflectionSettingsBundleVm();
                }
                return x.SettingsVM.Value;
            })
            .ObserveOnGui()
            .Select(x =>
            {
                SelectedSettings = x.Settings?.FirstOrDefault();
                return x;
            })
            .DisposePrevious()
            .ToGuiProperty<ReflectionSettingsBundleVm?>(this, nameof(Bundle), initialValue: null, deferSubscription: true);

        _status = targetSettingsVm
            .Select(x => (ErrorResponse)x.SettingsVM)
            .ToGuiProperty(this, nameof(Error), ErrorResponse.Success, deferSubscription: true);
    }
}